import org.gradle.work.DisableCachingByDefault

plugins {
    id 'java'
}

group 'dev.mudkip'
description 'A set of deobfuscated mappings for Minecraft Beta 1.7.3\'s game code.'
version project['version']

// Enigma is only compiled for Java 17+
java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17

configurations {
    enigma
}

repositories {
    mavenCentral()
    maven { url 'https://maven.fabricmc.net' }
}

dependencies {
    enigma 'cuchaz:enigma-swing:' + project['enigma_version']
    implementation 'net.fabricmc:mapping-io:' + project['mapping_io_version']
}

static String getUserAgent() {
    String javaVendor = System.getProperty('java.vendor')
    String javaVersion = System.getProperty('java.version')
    String javaVendorVersion = System.getProperty('java.vm.version')
    String osName = System.getProperty('os.name')
    String osVersion = System.getProperty('os.version')
    String osArchitecture = System.getProperty('os.arch')

    return String.format(
            'Gradle/8.3 (%s;%s;%s) (%s;%s;%s)',
            osName, osVersion, osArchitecture,
            javaVendor, javaVersion, javaVendorVersion
    )
}

static void download(URL url, File file) {
    if (file.exists()) {
        return
    }

    printf 'Downloading %s...%n', file.getName()
    HttpURLConnection connection = (HttpURLConnection) url.openConnection()
    connection.setConnectTimeout(5000)
    connection.setRequestProperty('User-Agent', getUserAgent())

    file.withOutputStream {
        it << connection.getInputStream()
    }
}

@DisableCachingByDefault
abstract class EnigmaTask extends JavaExec {
    @InputFile
    abstract RegularFileProperty getJar()

    @Input
    abstract Property<File> getMappings()

    EnigmaTask() {
        classpath project.configurations.enigma
        mainClass.set('cuchaz.enigma.gui.Main')
        jvmArgs '-Xmx2048M'
    }

    @TaskAction
    void exec() {
        if (!this.jar.isPresent()) {
            println 'Could not find the game JAR!'
            return
        }

        args '-jar'
        args this.jar.get().asFile.absolutePath
        args '-mappings'
        args this.mappings.get().absolutePath
        super.exec()
    }
}

File libraryDirectory = new File(project.rootDir, 'libs')
libraryDirectory.mkdirs()

tasks.register('enigmaClient', EnigmaTask) {
    jar = new File(libraryDirectory, 'client.jar')
    mappings = new File(project.rootDir, 'client')
    it.group = "flint"
}

tasks.register('enigmaServer', EnigmaTask) {
    jar = new File(libraryDirectory, 'client.jar')
    mappings = new File(project.rootDir, 'server')
    it.group = "flint"
}

download(new URL(project['client_url'] as String), new File(libraryDirectory, 'client.jar'))
download(new URL(project['server_url'] as String), new File(libraryDirectory, 'server.jar'))